#!/usr/bin/env node

var proj = require('../');
var cmd = require('../src/cli/cli_lib.js');
var cli_mode = process.argv[1].indexOf('mcs2cs') > -1;

// if executing as a script, init and run
if (cli_mode) {
  try {
    console.log(init(process.argv.slice(2))());
  } catch(e) {
    console.error(e.message);
    process.exit(1);
  }
}

// this file can be used as a node module (e.g. for testing)
module.exports = init;

// @params string or array
function init(params) {
  var opts = cmd.get_shared_options().parse(params);
  var files = opts._.length > 0 ? opts._ : null;
  var commentChar = opts.t || '#';
  var P1, P2, translateLine, projs;

  if ('l' in opts) {
    return function() {return cmd.get_info(opts.l);};
  }

  if (opts.proj4) {
    projs = opts.proj4.split(/[\s]+\+to[\s]+/);
    try {
      P1 = proj.pj_init(projs[0]);
      if (!projs[1]) {
        // If there is no second coordinate system defined, a geographic
        // coordinate system based on the datum and ellipsoid of the source
        // coordinate system is assumed.
        P2 = proj.internal.pj_latlong_from_proj(P1);
      } else {
        P2 = proj.pj_init(projs[1]);
      }
      translateLine = get_line_converter(P1, P2, opts); // get_proj_function(P1, P2, opts);

    } catch(e) {
      if (e.name == 'ProjError') {
        throw new Error('projection initialization failure\ncause: ' + e.message);
      } else {
        throw e;
      }
    }
    return cmd.get_input_transform(translateLine, opts);
  }

  throw new Error('usage: mcs2cs [ -eEfIlrstwW [args] ] [ +opts[=arg] ] [ files ]');
}

function print_error(msg, lineNo) {
  if (cli_mode) {
    // TODO: match cs2cs output more closely
    console.error('line ' + lineNo + ' error: ' + msg);
  }
}

function get_line_converter(P1, P2, opts) {
  var src, dst;
  if (opts.I) {
    src = P2;
    dst = P1;
  } else {
    src = P1;
    dst = P2;
  }
  var parseLine = cmd.get_line_parser(src.is_latlong, opts);
  var formatLine = cmd.get_line_formatter(dst.is_latlong, opts);
  return function(line, i) {
    var coords, oline;
    try {
      coords = parseLine(line);
      proj.pj_transform_point(src, dst, coords);
    } catch(e) {
      print_error(e.message, i + 1);
      coords = [Infinity, Infinity, 0];
    }
    return formatLine(coords);
  }
}
