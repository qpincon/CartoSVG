#!/usr/bin/env node

var proj = require('../');
var cmd = require('../src/cli/cli_lib.js');

// if executing as a script, init and run
if (process.argv[1].indexOf('mproj') > -1) {
  try {
    console.log(init(process.argv.slice(2))());
  } catch(e) {
    console.error(e.message);
    process.exit(1);
  }
}

// you can also require this file as a node module (e.g. for testing)
module.exports = init;

// @params string or array
function init(params) {
  var opts = cmd.get_shared_options().parse(params);
  var files = opts._.length > 0 ? opts._ : null;
  var commentChar = opts.t || '#';
  var P, translateLine;

  if ('l' in opts) {
    return function() {return cmd.get_info(opts.l);};
  }

  if (opts.proj4) {
    try {
      P = proj.pj_init(opts.proj4);
      translateLine = get_line_converter(P, opts);
    } catch(e) {
      if (e.name == 'ProjError') {
        throw new Error('projection initialization failure\ncause: ' + e.message);
      } else {
        throw e;
      }
    }
    if (P.is_latlong) {
      throw new Error('+proj=latlong unsuitable for use with mproj program');
    }
    return cmd.get_input_transform(translateLine, opts);
  }

  throw new Error('usage: mproj [ -eEfIlrstwW [args] ] [ +opts[=arg] ] [ files ]');
}

function get_line_converter(P, opts) {
  var parseLine = cmd.get_line_parser(!opts.I, opts);
  var formatLine = cmd.get_line_formatter(opts.I, opts);

  return function(line, i) {
    var input, output, oline, p;
    try {
      input = parseLine(line);
      if (opts.I) {
        p = proj.pj_inv_deg({
          x: +input[0],
          y: +input[1]
        }, P);
        output = [p.lam, p.phi];
      } else {
        p = proj.pj_fwd({
          lam: proj.internal.dmstor(input[0]),
          phi: proj.internal.dmstor(input[1])
        }, P);
        output = [p.x, p.y];
      }
    } catch(e) {
      // print_error(e.message, i + 1); // no line errors in Proj.4 proj
      output = [Infinity, Infinity];
    }
    return formatLine(output);
  }
}
